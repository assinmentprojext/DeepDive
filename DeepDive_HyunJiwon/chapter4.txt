변수
. 변수, 식별자, 선언


변수
하나의 값을 저장하기 위해 메모리에서 확보(allocate)한 공간.

식별자(identifier)
메모리 공간을 식별하기 위해서 붙인 변수의 고유한 이름. 식별자는 메모리 주소와 매핑관계를 가진다. 매핑 정보도 메모리에 저장되어야 한다.

변수 선언
식별자와 메모리 주소를 연결(name binding)하여 값을 저장할 수 있게 준비하는 것. 변수 선언에 의해 확보된 메모리 공간은 해제(release)되기 전까지 누구도 해당 공간을 사용할 수 없도록 보호된다.
변수 선언 시 var, const, let 키워드를 사용한다. ES6에서 let과 const가 도입되기 이전까지는 var로 변수를 선언하였다.
변수를 선언만 한 경우 아직 값이 할당되어있지 않는다. 그래서 선언 이후 변수선언에 의해 확보된 메모리가 비어있을 것으로 생각할 수 있으나, 자바스크립트 엔진은 undefined로 할당하여 초기화(initailization)한다.
자바스크립트 엔진은 변수 선언을 다음 두가지 단계에 걸쳐서 수행한다.

선언단계 : 변수 이름을 등록해 자바스크립트 엔진에 변수의 존재를 알린다.
초기화 단계 : 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undifined를 할당해 초기화한다.
var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행된다.
만약 초기화 단계를 거치지 않으면 이전에 다른 어플리케이션이 사용했던 값이 남아 있을수 있다. 이를 쓰레기 값(garbage value)이라 한다. 쓰레기 값 사용의 위험을 제거하기 위해서 자바스크립트의 var 키워드는 초기화를 수행한다.(굳이 undefined가 할당되어야하는 이유가 여기에 있었다. 다른 언어에서는 이를 어떻게 처리하는가?)

변수의 선언 실행 시점과 변수 호이스팅
console.log(score); // undefined
var score; // 변수 선언문


기본적으로 코드는 위에서 한 줄씩 실행되므로 위 코드의 첫 번째 줄에서 ReferenceError가 발생할 것이라 생각이 들지만. undefined를 출력하고 정상적으로 종료된다. 그 이유는 변수 선언이 런타임보다 이전에 먼저 실행되기 때문이다. 자바스크립트 엔진은 런타임에 앞서서 소스코드의 평과 과정을 거치면서 실행을 하기 위한 준비를 한다. 소스코드 평가 과정이 끝나면 비로소 모든 선언문(변수 선언 포함)을 제외하고 소스코드를 한 줄씩 순차적으로 실행한다.

자바스크립트 코드 실행 -> 소스코드 평가(모든 식별자를 선언) -> 선언문을 제외한 나머지 코드를 실행

자바스크립트 엔진은 변수 선언문의 위치와 상관없이 이를 먼저 실행한다. 따라서 변수 선언문의 위치와 상관없이 해당 변수를 참조할 수 있다.(허허;)

이렇게 변수 선언문의 코드가 선두로 끌어올려진 것처럼 동작하는 것을 변수 호이스팅이라 한다. 이는 자바스크립트의 고유한 특징이다.
값의 할당
var score = 80; // 변수 선언과 값의 할당
한줄로 변수 선언과 값의 할당을 하여도 실제로 둘의 실행시점이 다르다.

변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행!
값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.

값의 재할당
엄밀히 말하면 var 키워드로 선언한 변수는 선언과 동시에 undefined로 초기화 되기 때문에 변수에 처음으로 값을 할당하는 것도 재할당이다.

만약 값을 재할당 할 수 없어서 변수에 저장된 값을 변경할 수 없다면 그것은 상수(Constant) 이다. (상수는 단 한번만 할당할 수 있는 변수)

값을 재할당 할때 기존 공간에 새로운 값을 저장하는 것이 아닌 새로운 메모리 공간에 값을 저장하기 때문에 어떠한 식별자와도 연결되어 있지 않은 값들(더 이상 사용되지 않는 메모리)은 가비지 콜렉터에 의해 메모리에서 자동 해제된다.(가비지 콜렉터로 메모리 누수를 방지한다.)

언매니지드 언어 --> c와 같이 메모리 제어(malloc, free)를 개발자가 주도적으로 할 수 있는거

매니지드 언어 --> 개발자의 직접적인 메모리 제어를 허용하지 않음

식별자 네이밍 규칙
식별자는 특수문자를 제외한 문자, 숫자, 언더스코어, 달러 기호를 포함할 수 있다.
식별자는 특수문자를 제외한 문자, 언더스코어, 달러 기호로 시작해야한다.
예약어는 식별자로 사용할 수 없다.
그외에로도 변수 이름은 변수의 존재 목적을 쉽게 알게 하기 위해 의미를 명확히 표현해야하며 이름을 선언할 시 의미를 생각하면서 심사숙고하여 정하는 것이 좋다.

네이밍 컨벤션

카멜케이스(firstName)
스네이크케이스(first_name)
파스칼 케이스(FirstName)
가독성을 높이려면 카멜 케이스와 파스칼 케이스를 따르는 것이 유리하다.