chapter 05

표현식과 문

개념을 이해한다는것은 바로 용어를 정확히 이해하고 설명할수 있다는것
용어에 대한이해 -> 정확한 커뮤니케이션 가능, 문서를 이해하고 프로그래밍 언어를 학습하는데 중요한 역활을 함

5.1 값

값(value)은 식(표현식expression)평가되어 생성된 결과를 말한다
평가란 식을 해석해서 값을 생성하거나 참조하는것

10+20; // 30
10+20이 평가되어 생성된 숫자 값 30이 생성된다

5.2 리터럴

리터럴은 사람이 이해할수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법이다.

3
숫자 리터럴 3 작성시 자바스크립트 엔진은 이를 평가해 숫자값 3을 생성한다
리터럴은 값으로 평가 되기때문에 리터럴도 표현식이다

5.3 표현식

표현식은 값으로 평가될수 있는 문(statement)으로 표현식이 평가되면 새로운값을 생성하거나 기존값을 참조한다.

표현식 예제

리터럴 표현식
10
'hello'

식별자 표현식(선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

연산자 표현식
10 + 20
sum = 10
sum !== 10

함수/메서드 호출 표현식(선언이 이미 존재한다고 가정)
square()
person.getName()

표현식과 표현식이 평가된 값은 동등한 관계이다. 문법적으로 값이 위치할수 있는 자리에는 표현식도 위치할수 있다.

5.4 문

문과 표현식을 구분하고 해석할수 있다면 자바스크립트 엔진의 입장에서 코드를 읽을수 있고 실행결과를 예측하는데 도움이 된다
문(statement)은 프로그램을 구성하는 기본단위이자 최소 실행 단위이다.

문은 여러 토큰으로 구성되며 토큰(token)이란 문법적인 의미를 가지며, 문법적으로 더이상 나눌수 없는 코드의 기본요소를 의미한다.

var sum = 1 + 2;
문
var, sum, =, 1, +, 2;
토큰

문은 컴퓨터에 내리는 명령이다 선언문 할당문 조건문 반복문 등으로 구분할수 있다.

변수 선언문
var x;

할당문
X = 5;

함수 선언문
function foo () {}

조건문
if (x > 1) {console.log(X); }

반복문
for (var i = 0; i < 2; i++){console.lo(i)}


5.5 세미콜론과 세미콜론 자동삽입기능

세미콜론은 문의 종료를 나타낸다. 소스코드를 분석할때 문의 끝이라고 예상되는 지점에 세미콜론을 자동으로 붙여주는 세미콜론 자동 삽입기능(ASI)이 있다.
세미콜론 자동 삽입기능은 개발자의 예측과 일치하지 않는 경우가 있기때문에 세미콜론을 사용하는것이 좋다

5.6 표현식과 표현식이 아닌 문

표현식은 문의 일부일수도 있고 그 자체로도 문이 될수 있다

표현식인 문은 값으로 평가될수 있음
표현식이 아닌 문은 값으로 평가될수 없는 문
표현식과 문의 간단한 구별법은 변수에 값을 할당해보는 것이다

var x; -> 변수선언문은 값으로 평가될수 없으므로 표현식이 아닌 문이다
X = 1 + 2; -> 값으로 평가될수 있기에 표현식이면서 완전한 문이다

var foo = var x; -> 표현식이 아닌 문은 값처럼 사용할수 없다 (syntaxError)
X = 100; -> 할당문은 그 자체가 표현식이자 문이다
var foo = x =100;
console.log(foo); -> 표현식인 문은 값처럼 쓸수 있다

완료값
크롬 개발자도구에서 표현식이 아닌 문을 실행시 언제나 undefined를 출력한다 이를 완료값이라고 한다.
완료값은 표현식의 평가결과가 아니므로 참조할수 없다
반대로 표현식은 문을 실행하면 언제나 평가된 값을 반환한다









