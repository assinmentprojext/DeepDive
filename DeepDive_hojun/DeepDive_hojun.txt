# 5장 표현식과 문

# 1. 값

값이란 표현식(즉 만들어진 코드)가 평가되어 생성된 결과를 의미한다.

즉 강사님이 계속 언급하고 계시는 완성본이라고 생각하면 될 것 같습니다.

ex) ver sum = 10 + 20; 의 예제에서

sum은 10+20의 표현식을 기억하고 있는 것이 아닌 30이라는 결과값을 sun에 할당하여 기억하게 하는 것입니다.

값은 다양한 방법 ( 컴퓨터 언어인 0과 1로 이루어진 2진법 등 )으로도 생성할 수 있습니다. 다양한 방법 중 기본적인 리터널로 이어가겠습니다.

---

# 2. 리터럴

리터럴이란 사람들이 이해할 수 있는 문자(아라비아 숫자, 알파벳, 한글 등) 혹은 약속된 기호 (” “, . ,[ ], { }, // 등) 를 사용해서 값을 보여주는 표기법을 의미합니다.

리터럴은 자바스크립트 엔진에 실행될 때 리터럴을 평가하여 값을 생성합니다. 

| 정수 리터럴 | 100, 10, 1 | 정수 |
| --- | --- | --- |
| 부동소수점 리터럴 | 10.5  | 소수점 |
| 2진수 리터럴 | 0b0100001 | 0b로 시작 |
| 8진수 리터럴 | 0o101 | Es6에 도입하여 0o로 시작 |
| 16진수 리터럴 | 0x41 | ES6에 도입하여 0x로 시작 |
| 문자열 리터럴 | ‘Hello’ ‘안녕’ “안녕하세요” | 문자 |
| 불리언 리터럴 | true / false | 맞다 틀리다 |
| null 리터럴 | null | 비어있음 |
| underfined 리터럴 | undefined | 설정 불가 |
| 객체 리터럴 | { name: ‘Lee’, address ‘seoul’ } |  |
| 배열 리터럴 | [1, 2, 3] |  |
| 함수 리터럴 | function( ) { } |  |
| 정규 표현식 리터럴 | /[ A-Z ] +/ g |  |

---

# 3. 표현식

표현식이란 값으로 평가될 수 있는 문(문항) 입니다. 

표현식이 평가되면 새로운 값을 만들어 내거나 기존의 값을 참조합니다.

```jsx
let ABC = 2 
```

숫자 2는 리터럴 이라 할 수 있다고 합니다. 

단순히 2가 아닌 자바스크립트 엔진에 의해서 실행 시 평가되어 값을 생성(표현)하기 때문에 리터럴 자체로 표현식 이라고 합니다

```jsx
let ABC = 1+1 
```

1+1은 리터럴(1)과 연산자(+) 로 이루어져 있습니다 

하지만 1+1 도 평가되어 숫자 2를 생성함으로 표현식 이라고 할 수 있습니다.

```jsx
ABC ; // → 2 
```

변수 식별자를 참조하면 변수 값으로 평가가 됩니다. 식별자 참조는 값을 생성하지 않지만 평가되므로 표현식이라고 합니다. 

```jsx
// 선언이 되었다고 가정
sum = 10 + 20
sum + 20; // -> 50 
```

표현식은 값으로 평가가 됩니다 표현식과 표현식이 평가된 값은 동등한 관계를 가집니다.

이러한 동등한 관계를 동치라 표현하는데요

1+2 = 3 에서 1+2는 3과 동치인 관계입니다. 이와 같은 표현식을 값 처럼 활용할 수 있습니다. 

문법적으로도 활용이 가능한데 위의 스크립트처럼 sum은 10 + 20이라는 값과 동치 입니다. 

즉 sum에는 할당되어있는 값 30으로 평가 됩니다.

이렇게 표현되는 표현식을 ‘식별자 표현식’ 이라고 합니다. 

이와같이 값으로 평가될 수 있는 문(문항)은 모두 표현식이라고 합니다.

```jsx
// 리터널 표현식
10
'hello'

// 식별자 표현식( 선언이 되었다 가정 )
sum
person.name
arr[1]

//연산자 표현식
10 + 20
sum = 10
sum !== 10
sum + 10

// 함수/메서드 호출 표현식 ( 선언이 되었다 가정)
square()
person.getName()
```

---

# 4. 문

문이란 프로그램을 구성하는 기본 단위이자 최소 실행 단위이며 여러가지 토큰으로 구성됩니다.

토큰이란 문법적인 의미를 가지고 문법적으로 나눌 수 없는 코드의 기본요소 입니다

```jsx
// 토큰 let, sum, =, 1, + 
let sum = 1 + 1;
-------문--------
```

이러한 문의 집합으로 이루어진 것이 프로그램이며 문을 작성하고 순서에 맞게 나열한 것이 프로그래밍 입니다.

문은 명령문이라고 부르기도 하는데 말의 뜻과 같게 컴퓨터에 명령을 내립니다.

또한 선언문, 할당문, 조건문, 반복문 등 구분할 수 있으며

변수 선언문은 실행되면 변수가 선언되고 할당문은 실행되면 값이 할당이 되며 조건문은 지정된 조건에 따라 실행할 코드 블록( {…..} ) 이 결정되며 실행되고, 반복문은 실행하면 특정 코드 블록을 반복합니다.

```jsx
//변수 선언문
let sum;

//할당문
sum = 10;

//함수 선언문
function foo () {}

//조건문
if (sum > 1){
	console.log(sum);
	}
	
//반복문
for( let i=1; i<10; i++ ){
	console.log(i);
	}
```

---

# 5. 세미콜론과 세미콜론 자동 삽입 기능

자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악합니다.

문의 끝에만 세미콜론을 붙여도 되고 세미콜론은 생략 가능합니다.

위 세미콜론이 생략 가능한 이유는 자바스크립트 엔진이 소스코드를 해석할 때 문의 끝이라고 예측되는 지점에 세미콜론을 자동으로 붙여주는 세미콜론 자동삽입 기능이 암묵적으로 수행되기 때문입니다.

---

# 6. 표현식인 문과 표현식이 아닌 문

해당문항은 이해가 어려워 조금 더 이해해보고 작성해보도록 하겠습니다.
