2. 자바스크립트란 ?

1) 자바스크립트의 탄생 
1995년 넷스케이프 커뮤니케이션즈
    : 웹 페이지를 위한 경량프로그래밍 언어 도입 계획
1996년 자바스크립트 made by 브레던 아이크
    3월 넷스케이프 네비게이터 2 모카(mocha) 탑재
    9월 라이브 스크립트
    12월 자바스크립트

2) 자바스크립트의 표준화

    1996년 8월 
        마이크로소프트가 jscript를 익스플로어에 도입
    jscript와 javascript의 호환성이 떨어지자 마이크로소프트와 넷스케이프 커뮤니케이션즈는 자사 브라우저의 시장 점유율을높이기 위해 자사 브라우저에서만
    동작 가능한 기능을 경쟁적으로 추가

    ---> 크로스 브라우징 

        1996년 1월

        넷스케이프 -> 자바스크립트 표쥰화 -> ecma

            자바스크립트의 파편화 방지 및 표준화된 자바스크립트를 위해 넷스케이프는 ecma에 자바스크립트 표준화 요청

    3) 자바스크립트 성장의 역사

        렌더링 : html, css, javascript로 작성된 문서를 시각적으로 출력하는 것을 말한다
            초창기 자바스크립트 
                1) 웹 페이즈 보조적 기능만 수행
                2) 브라우저는 서버로 부터 받은 html 과 css만 렌더링 했음

        3)-1 Ajax(XMLHttpRequest)
            1999년 자바스크립트를 이용해서 서버와 브라우저가 비동기(동시에 일어나지 않음)로 데이터를 교환할 수 있는 통신 기능을 만듬

            이전의 웹페이지
                완전한 html코드를 서버로 부터 전송받아 웹페이지 전체에 렌더링
                    단점
                        1) 변경할 필요가 없는 부분까지 처음부터 다시 렌더링 필요
                        2) 성능저하
                        3) 화면 깜박임 현성
            Ajax 렌더링
                1) 웹 페이지에서 변경할 필요 없는 부분 렌더링x
                2) 서버로부터 필요한 데이터만 전송받아 한정적 렌더링 가능
                3) 화면 부드러움 효과 
            
            e.g., 2005년의 구글 맵스
                자바스크립트와 Ajax를 기반으로 동작
                웹프로그래밍 언어로써의 자바스크립트의 기능성을 확인하는 계기가 됨

        3)-2 jQury

        DoM(document object model)
            dom은 웹페이지를 보여주는 브라우저가 html속성 tag 값들을 읽어들여 웹페이즈 구조를 해석해서 그 구성요소를
            프로그래밍 언어로 조작하기 쉽게 객체 형태로 변환한 것!

            easy. ver)
                자바스크립트가 html(doucument)를 object자료로 정리한 것
                    왜 html을 object화 했을까 
                        -> js로 html를 조작하기 위해 
                        ->  js가 해석할 수 있는 문장으로 변경하기 위해서

        jQury 특징 
            1) dom조작 수월해짐
            2) 크로스 브라우징 효과 완화

        3)-3 v8자바스크립트 엔진(2008년)

            구글 맵스 이후 자바스크립트 웹 개발 구축 시도 증가
                -> 더 빠른 자바스크립트 필요해짐
                    -> v8자바스크립트 엔진
                        -> 프론트 엔드 영역 구축
        
        3)-4 node.js (2009년)
            런타임 환경 : 컴퓨터가 실행하는 동안 프로세스나 프로그램을 위한 소프트 웨어 서비스를 제공하는 가상 머신의 상태
                e.g., 우리가 사용하는 웹브라우저도 네트워크 통신을 통해 html,css, js를 받아 실행하는 런타임 환경이라 
                할 수 있음

            라이언달이 만든 node.js는 구글 v8자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경으로
            주로 서버 사이드 애플리케이션 개발에 사용

            node.js는 자바스크립트엔진을 기반으로 하므로
            node.js 환경에서 동작하는 애플리케이션은 자바스크립트로 개발

            프론트&백엔드 영역에서 자바스크립트를 사용할 수 있다는 동형성(질은 다르지만 같이 개발할 수 있다)은
            별도의 언어를 학습하기 위한 시간을 줄일 수 있다
            .
            node.js
            비동기 io지원   ---------  >
                                           ( 요청 처리 성능 좋아짐 ) 
            단일 스레드 이벤트 루프 ----->

            비동기 i/o 의 장점
             1) 함수가 동기화 되어있다
             2) cpu가 빨라진다

            단일 스레드
                이벤트를 처리하는 스레드가 하나인 상태 
                이벤트 루프 구현이 복잡하지 않고 예측가능함
                하나의 이벤트 큐에 입력됭 이벤트를 처리하기 때문에 
                이벤트가 발생한 순서대로 수행할 수 있음
                하지만 다중코어 cpu를 효울적으로 사용할 수 없어 나중에 들어온 이벤트 처리가 늦음
                다중코어를 가진 서버에서 node,js처럼 단을 스레드 루프를 사용하는 애플리케이션을 효율적으로 
                사용하기 위해 한 개가 아니 여러개의 인스턴스를 실행하는 경우도 있다

            따라서 node.js는 데이터를 실시간으로 처리하기 위해 i/o가 빈번하게 발생하는 spa(single page application
        )에 적합하다. 그러나 cpu가 높은 애플리케이션에는 권장하지 않는다

        3) -5 프레임 워크
            이전의 개발방식으로 현재의 개발 방식을 수행하기 어려워져서 등장함
            e.g., 빵이라는 대분류에서  빠리바게트ㄷ, 뜨레쥬르, 성심당... 이런 것들을 프레임 워크에 예시라 볼 수 있다

        4) 자바 스크립트와 ecma script
            ecma script는 자바스크립트의 표준 사양인     
            